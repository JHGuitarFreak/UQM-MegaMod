// Copyright Michael Martin, 2004.

/*
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#ifndef UQM_SETUPMENU_H_
#define UQM_SETUPMENU_H_

#include "controls.h"

#if defined(__cplusplus)
extern "C" {
#endif

typedef enum {
	OPTVAL_DISABLED,
	OPTVAL_ENABLED
} OPT_ENABLABLE;

typedef enum {
	OPTVAL_PC,
	OPTVAL_3DO
} OPT_CONSOLETYPE;

typedef enum {
	OPTVAL_NO_SCALE,
	OPTVAL_BILINEAR_SCALE,
	OPTVAL_BIADAPT_SCALE,
	OPTVAL_BIADV_SCALE,
	OPTVAL_TRISCAN_SCALE,
	OPTVAL_HQXX_SCALE,
} OPT_SCALETYPE;

typedef enum {
	OPTVAL_320_240,
	OPTVAL_REAL_1280_960,
} OPT_RESTYPE;

typedef enum {
	NO_BLOWUP,
	OPTVAL_SCALE_640_480,
	OPTVAL_SCALE_960_720,
	OPTVAL_SCALE_1280_960,
	OPTVAL_SCALE_1600_1200,
	OPTVAL_SCALE_1920_1440,
} OPT_RESSCALER;

typedef enum {
	OPTVAL_PURE_IF_POSSIBLE,
	OPTVAL_ALWAYS_GL
} OPT_DRIVERTYPE;

typedef enum {
	OPTVAL_SILENCE,
	OPTVAL_MIXSDL,
	OPTVAL_OPENAL
} OPT_ADRIVERTYPE;

typedef enum {
	OPTVAL_LOW,
	OPTVAL_MEDIUM,
	OPTVAL_HIGH
} OPT_AQUALITYTYPE;

typedef enum {
	OPTVAL_NO_GOD,
	OPTVAL_INF_ENERGY,
	OPTVAL_INF_HEALTH,
	OPTVAL_FULL_GOD
} OPT_GODTYPE;
 
typedef enum {
	OPTVAL_NORMAL,
	OPTVAL_SLOW,
	OPTVAL_FAST
} OPT_TDTYPE;

typedef enum {
	OPTVAL_MMMDDYYYY,
	OPTVAL_MMDDYYYY,
	OPTVAL_DDMMMYYYY,
	OPTVAL_DDMMYYYY
} OPT_DATETYPE;

typedef enum {
	OPTVAL_NORM,
	OPTVAL_EASY,
	OPTVAL_HARD,
	OPTVAL_IMPO
} OPT_DIFFICULTY;

typedef enum {
	OPTVAL_NOM_OFF,
	OPTVAL_NOM_EASY,
	OPTVAL_NOM_NORM
} OPT_NOMAD;

typedef enum {
	OPTVAL_KBM,
	OPTVAL_XBX,
	OPTVAL_PS4
} OPT_CONTROLLER;

typedef enum {
	OPTVAL_FUEL_NORM,
	OPTVAL_FUEL_AT_DEST,
	OPTVAL_FUEL_TO_SOL,
	OPTVAL_FUEL_ALL
} OPT_FUELRANGE;

typedef enum {
	OPTVAL_STEP,
	OPTVAL_NEAREST,
	OPTVAL_BILINEAR,
	OPTVAL_TRILINEAR
} OPT_MELEEZOOM;

typedef enum {
	OPTVAL_PC_SPHERE,
	OPTVAL_3DO_SPHERE,
	OPTVAL_UQM_SPHERE
} OPT_SPHERETYPE;

typedef enum {
	OPTVAL_PC_WINDOW,
	OPTVAL_3DO_WINDOW,
	OPTVAL_UQM_WINDOW
} OPT_WINDOWTYPE;

typedef enum {
	OPTVAL_RESUME_DISABLED,
	OPTVAL_RESUME_5MIN,
	OPTVAL_RESUME_INDEFINITE
} OPT_MUSICRESUME;

typedef enum {
	OPTVAL_PRIME,
	OPTVAL_PLANET,
	OPTVAL_MRQ,
	OPTVAL_STAR
} OPT_SEED;

typedef enum {
	OPTVAL_DEFAULT_COLORS,
	OPTVAL_STARSEED_COLORS
} OPT_SPHERECOLORS;

typedef enum {
	OPTVAL_NO_SPACEMUSIC,
	OPTVAL_SM_NO_SPOILERS,
	OPTVAL_SM_SPOILERS
} OPT_SPACEMUSIC;

typedef enum {
	OPTVAL_DO_NOTHING,
	OPTVAL_REM_THING,
	OPTVAL_ADD_THING
} OPT_ADD_REMOVE;

enum {
	CHOICE_GRAPHICS,
	CHOICE_FRBUFFER,
	CHOICE_SCALER,
	CHOICE_SCANLINE,
	CHOICE_MENUSTYLE,
	CHOICE_FONTSTYLE,
	CHOICE_SCANMENU,
	CHOICE_SCROLLSTYLE,
	CHOICE_SUBTITLES,
	CHOICE_REMIXES1,
	CHOICE_DISPLAY,
	CHOICE_CUTSCENE,
	CHOICE_SHOWFPS,
	CHOICE_MELEEZOOM,
	CHOICE_POSAUDIO,
	CHOICE_SNDDRIVER,
	CHOICE_SNDQUALITY,
	CHOICE_SLVSHIELD,
	CHOICE_BTMPLAYER,
	CHOICE_TOPPLAYER,
	CHOICE_KBLAYOUT,
	CHOICE_REMIXES2,
	CHOICE_SPEECH,
	CHOICE_ASPRATIO,
	CHOICE_CHEATING,
	CHOICE_CHGODMODE,
	CHOICE_CHTIME,
	CHOICE_CHWARP,
	CHOICE_CHSHIPS,
	CHOICE_CHHEADSTART,
	CHOICE_CHUPGRADES,
	CHOICE_CHINFRU,
	CHOICE_SKIPINTRO,
	CHOICE_FUELCIRCLE,
	CHOICE_MMENUMUSIC,
	CHOICE_NEBULAE,
	CHOICE_ORBPLANETS,
	CHOICE_TEXPLANETS,
	CHOICE_DATESTRING,
	CHOICE_CHINFFUEL,
	CHOICE_PARTPICKUP,
	CHOICE_SUBMENU,
	CHOICE_RESOLUTION,
	CHOICE_CHINFCRD,
	CHOICE_HAZARDCLR,
	CHOICE_CUSTBORDER,
	CHOICE_IPMUSIC,
	CHOICE_REMIXES3,
	CHOICE_FUELDECIM,
	CHOICE_JOYSTICK,
	CHOICE_ANDRZOOM,
	CHOICE_LANDERHOLD,
	CHOICE_SCRMELT,
	CHOICE_SKILLLVL,
	CHOICE_EXTENDED,
	CHOICE_NOMAD,
	CHOICE_GAMEOVER,
	CHOICE_IPSHIPDIR,
	CHOICE_ORZFONT,
	CHOICE_INPDEVICE,
	CHOICE_SMARTAUTO,
	CHOICE_SCANTINT,
	CHOICE_IPSTYLE,
	CHOICE_IPBACKGROUND,
	CHOICE_SCANSTYLE,
	CHOICE_NOSTOSCILL,
	CHOICE_OSCILLSTYLE,
	CHOICE_ANIMHYPER,
	CHOICE_LANDERSTYLE,
	CHOICE_PLNTEXTURE,
	CHOICE_FLAGSHIP,
	CHOICE_CHCLEANHYPER,
	CHOICE_CHDECLEAN,
	CHOICE_CHNOPLANET,
	CHOICE_VISITED,
	CHOICE_HDM_IP,
	CHOICE_SCANSPHERE,
	CHOICE_SLAUGHTER,
	CHOICE_ADVAUTO,
	CHOICE_MLTOOLTIP,
	CHOICE_MUSRESUME,
	CHOICE_WINDOWTYPE,
	CHOICE_GAMESEED,
	CHOICE_SOICOLOR,
	CHOICE_SCATTERCARGO,
	CHOICE_LANDERUPGMASK,
	CHOICE_FLEETPOINT,
	CHOICE_DEVSPAWNER,
	CHOICE_DEVPET,
	CHOICE_DEVBOMB,
	CHOICE_DEVSUN,
	CHOICE_DEVSPHERE,
	CHOICE_DEVHELIX,
	CHOICE_DEVSPINDLE,
	CHOICE_DEVULTRON0,
	CHOICE_DEVULTRON1,
	CHOICE_DEVULTRON2,
	CHOICE_DEVULTRON3,
	CHOICE_DEVMAIDENS,
	CHOICE_DEVCASTER0,
	CHOICE_DEVCASTER1,
	CHOICE_DEVSHIELD,
	CHOICE_DEVEGGCS0,
	CHOICE_DEVEGGCS1,
	CHOICE_DEVEGGCS2,
	CHOICE_DEVSHUTTLE,
	CHOICE_DEVBEAST,
	CHOICE_DEVSLYCODE,
	CHOICE_DEVWARPPOD,
	CHOICE_DEVTRIDENT,
	CHOICE_DEVROD,
	CHOICE_DEVLUNBASE,
	CHOICE_UPGLANDERSPD,
	CHOICE_UPGLANDERCRG,
	CHOICE_UPGLANDERFRE,
	CHOICE_UPGLANDERBSH,
	CHOICE_UPGLANDERQSH,
	CHOICE_UPGLANDERLSH,
	CHOICE_UPGLANDERHSH,
	CHOICE_MODPOINTDEF,
	CHOICE_MODFUSBLAST,
	CHOICE_MODFUELTANK,
	CHOICE_MODTRACKING,
	CHOICE_MODHELLBORE,
	CHOICE_MODFURNACE,
	CHOICE_SHIPSEED,

	CHOICE_COUNT
};

enum {
	MENU_QUITSUB,		// Quits settings sub menu
	MENU_GRAPHICS,		// Graphics menu
	MENU_AUDIO,			// General audio menu (volume, quality etc)
	MENU_ENGINE,		// Engine behaviour menu (PC/3DO)
	MENU_CHEATS,		// Cheats menu
	MENY_KEYCONF,		// Main key configuration menu (input device etc)
	MENU_ADVANCED,		// Advanced settings menu
	MENU_EDITKEYS,		// Key layout editing menu (submenu for KEYCONF)
	MENU_MUSIC,			// Music menu (remixes)
	MENU_VISUAL,		// Visual menu
	MENU_QOL,			// Quality of life features menu
	MENU_DEVICES,		// Add devices cheat submenu
	MENU_UPGRADES,		// Add upgrades cheat submenu
	
	MENU_COUNT
};

enum {
	SLIDER_MUSVOLUME,
	SLIDER_SFXVOLUME,
	SLIDER_SPCHVOLUME,
	SLIDER_GAMMA,
	SLIDER_NEBULA,

	SLIDER_COUNT
};

enum {
	BTN_QUITSETUP,
	BTN_QUITSUBMENU,
	BTN_GFXMENU,
	BTN_ENGMENU,
	BTN_SNDMENU,
	BTN_CHTMENU,
	BTN_KEYMENU,
	BTN_ADVMENU,
	BTN_EDITKEYS,
	BTN_PREVMENU,
	BTN_MUSMENU,
	BTN_VISMENU,
	BTN_QOLMENU,
	BTN_DEVMENU,
	BTN_UPGMENU,
	BTN_CHTPREV,

	BUTTON_COUNT
};

enum {
	LABEL_UNUSED,
	LABEL_KEYSTOOLTIP,
	LABEL_TAPTOOLTIP,
	LABEL_PRESSTOEDIT,
	LABEL_SPACER,
	LABEL_UI,
	LABEL_COMM,
	LABEL_IP,
	LABEL_SCAN,

	LABEL_COUNT
};

enum {
	TEXT_LOUTNAME,
	TEXT_GAMESEED,
	TEXT_CUSTMRES,

	TEXTENTRY_COUNT
};

enum {
	CONTROL_UP,
	CONTROL_DOWN,
	CONTROL_LEFT,
	CONTROL_RGHT,
	CONTROL_WEAP,
	CONTROL_SPEC,
	CONTROL_ESC,
	CONTROL_THRU,

	CONTROLENTRY_COUNT
};

#define NUM_UPGRADES 13

/* At the moment, CONTROL_TEMPLATE is directly in this structure.  If
 * CONTROL_TEMPLATE and the options available diverge, this will need
 * to change */
typedef struct globalopts_struct {
	OPT_SCALETYPE scaler;
	OPT_RESTYPE screenResolution;
	OPT_RESSCALER loresBlowup;
	OPT_DRIVERTYPE driver;
	OPT_ADRIVERTYPE adriver;
	OPT_AQUALITYTYPE aquality;
	OPT_GODTYPE godModes;
	OPT_TDTYPE tdType;
	OPT_DATETYPE dateType;
	OPT_DIFFICULTY difficulty;
	OPT_NOMAD nomad;
	OPT_MELEEZOOM meleezoom;
	OPT_CONTROLLER controllerType;
	OPT_FUELRANGE fuelRange;
	OPT_SPHERETYPE sphereType;
	OPT_WINDOWTYPE windowType;
	OPT_MUSICRESUME musicResume;
	OPT_SEED seedType;
	OPT_SPHERECOLORS sphereColors;
	OPT_SPACEMUSIC spaceMusic;
	OPT_ADD_REMOVE deviceArray[28], upgradeArray[NUM_UPGRADES];
	OPT_ENABLABLE fullscreen, subtitles, scanlines, fps, stereo, music3do,
			musicremix, speech, keepaspect, cheatMode, mainMenuMusic,
			nebulae, orbitingPlanets, texturedPlanets, godMode, bubbleWarp,
			unlockShips, headStart, unlockUpgrades, infiniteRU, skipIntro,
			infiniteFuel, partialPickup, submenu, infiniteCredits,
			customBorder, volasMusic, directionalJoystick, wholeFuel,
			extended, gameOver, shipDirectionIP, hazardColors, orzCompFont,
			smartAutoPilot, nonStopOscill, hyperStars, planetTexture,
			noHQEncounters, deCleansing, meleeObstacles, showVisitedStars,
			unscaledStarSystem, slaughterMode, advancedAutoPilot,
			meleeToolTips, scatterElements, showUpgrades, fleetPointSys,
			shipSeed;
	OPT_CONSOLETYPE menu, text, scroll, intro, shield, scrTrans,
			landerHold, tintPlanSphere, planetStyle, scanStyle,
			scopeStyle, landerStyle, flagshipColor;
	CONTROL_TEMPLATE player1, player2;
	int speechvol, musicvol, sfxvol, nebulaevol, cscan;
	int gamma, starBackground;
} GLOBALOPTS;

void SetupMenu (void);

void GetGlobalOptions (GLOBALOPTS *opts);
void SetGlobalOptions (GLOBALOPTS *opts);

#if defined(__cplusplus)
}
#endif

#endif // UQM_SETUPMENU_H_
